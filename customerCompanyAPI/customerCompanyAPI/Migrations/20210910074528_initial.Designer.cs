// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using customerCompanyAPI.Data;

namespace customerCompanyAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210910074528_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("customerCompanyAPI.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressDirection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SucursalId")
                        .HasColumnType("int");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateIn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SucursalId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("countryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("countryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SucursalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SucursalId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhoneId")
                        .HasColumnType("int");

                    b.Property<string>("StatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("dateIn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PhoneId");

                    b.HasIndex("StatusId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SucursalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SucursalId");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.Status", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.Sucursal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PhoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PhoneId");

                    b.ToTable("Sucursal");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.Address", b =>
                {
                    b.HasOne("customerCompanyAPI.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("customerCompanyAPI.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("customerCompanyAPI.Models.Customer", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("customerCompanyAPI.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("customerCompanyAPI.Models.Sucursal", null)
                        .WithMany("Addresses")
                        .HasForeignKey("SucursalId");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.City", b =>
                {
                    b.HasOne("customerCompanyAPI.Models.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryId");

                    b.Navigation("country");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.Company", b =>
                {
                    b.HasOne("customerCompanyAPI.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("customerCompanyAPI.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("customerCompanyAPI.Models.Sucursal", "Sucursal")
                        .WithMany()
                        .HasForeignKey("SucursalId");

                    b.Navigation("Customer");

                    b.Navigation("Status");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.Country", b =>
                {
                    b.HasOne("customerCompanyAPI.Models.Country", null)
                        .WithMany("countries")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.Customer", b =>
                {
                    b.HasOne("customerCompanyAPI.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("customerCompanyAPI.Models.Company", null)
                        .WithMany("Customers")
                        .HasForeignKey("CompanyId");

                    b.HasOne("customerCompanyAPI.Models.Phone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneId");

                    b.HasOne("customerCompanyAPI.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Address");

                    b.Navigation("Phone");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.Phone", b =>
                {
                    b.HasOne("customerCompanyAPI.Models.Customer", null)
                        .WithMany("Phones")
                        .HasForeignKey("CustomerId");

                    b.HasOne("customerCompanyAPI.Models.Sucursal", null)
                        .WithMany("Phones")
                        .HasForeignKey("SucursalId");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.Sucursal", b =>
                {
                    b.HasOne("customerCompanyAPI.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("customerCompanyAPI.Models.Company", null)
                        .WithMany("Sucursals")
                        .HasForeignKey("CompanyId");

                    b.HasOne("customerCompanyAPI.Models.Phone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneId");

                    b.Navigation("Address");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.Company", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Sucursals");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.Country", b =>
                {
                    b.Navigation("countries");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("customerCompanyAPI.Models.Sucursal", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
